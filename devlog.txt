Battle for the dark star:

TODO: default item values


added default stat values based on type [ship/bullet/etc] to the static Game Constants
===
started making the fleet that acts as a talent tree to modify stats and hold/create/spend resources
=====
the battle overhead in space that is set up as a background action can use particles systems to 'send out fighters'
========
tried adding an element to the 'zigzag' bullet for multiple direction changes [up,down,left,right]
-this is very similar to just a spiral and from a player standpoint would not seem different enough to be worth engaging with
====
more bullet type stuff: added zig zags
======
bullets and sfx [explosions] use the factory format on their own
-> my natural inclination is to now centralize this, but thats an extra step that I could easily do later
--> and right now its not clear if any more would end up being needed to constitute the need for the work
---> and the sfx /bullet script are both parent scripts to alternate to match what is needed when they are called so I wont be adding more subtypes
============
july2:
===============

added bullet types to the enum groups, for the types of projectiles that can be fired [spirals, boomerang etc]




=====
june23: started turning stats into a dictionary constructed from the enum:
-> this way adding stats is easier and I dont need to update multiple portions of the inventory and item manager code
---should it bne a list to be seen in the inspector?


expand the stats to make having some items apply to multiple areas easier. A chasis reducing speed or engine increasing dmg etc

Stat sheets: making the master sheet easy to read and add to will make item creation easier in the long run. Doesnt need to be fancy with xml or json, just  ',' and ':' with the stat names

Gameloop: what data needs to be tracked for a given level for restarting versus traveling to the map fresh [respawn enemies versus maintain current state]

NPCs/Targets: -> Actor: anything with hitpoints

Progress: Competing fleets -> stateful game progress:
    Player and Enemy fleet act as part of a talent tree that changes the game state:
    -rescue a ship that can upgrade items
    -destroy a fuel refinery to increase the time before the next attack
    -capture mining facility to decrease number of enemies that respawn
    etc


Camera Control: for hitting the map boundary and returning thr player back to the play are -> for the player -> camera controls the rotation back to center to avoid the jitter and possible motion sickness 

Enemy AI: -> always turn to target and move forward results in a small constant bumping when too close
Enemy AI: -> some states have conditions in them external of the 'make decision' paradigm [ a strafing run would start at one end of the ship and end at the other, so that enemy would check when it reaches the end NOT wait to 'make decision']




====
Enemy
===
## Data:
hp,pointValue,itemdrops
===
## Functionaility

- [Stance](#idle,aggressive,neutral,defensive,active)
  + [idle](#unaware_of_target)
  + [alert](#aggressive,neutral,defensive)
        - [State](#AI_logic)
    **_OR_**
  + [active](#always_in_alert)
        - [State](#AI_logic)


====


public enum Stats
{
    none
    , armor
    , damage
    , speed

    , mobility

    , fireRate
    , stamina_max
    , stamina_cost
    , stamina_rechargeLockout
    , backpack_slots
    , pointValue

    ??
     collision resistance
     collision attack damage
}

?? ---> engine's have a 'use % of speed stat' for [fwd,lateral, etc]





Hi Morgan,

That is great to hear. On [6/6-6/8] and [6/13-6/17] I am available anytime between 10am and 2pm Eastern Time.

Thanks,
Dan Donato


  