Battle for the dark star:


TODO: 'computer' dradis, lock on, [zoom?]


===
made 'bullet_type' a list to allow for type combinations: e.g. a missile that passes through walls
===
weaponbase now has a bullettype that it [TODO: applies to the bullets it fires]
===
the acceleration stat applies to the engines
====
locking door that you shoot to open
===
missile style bullets
===
changed the itemmanagers 'read file' functionaility to use the correct Unity style load resources and not
the default read text file of c#
===
added enemy movement trails
===
added lateral trail for player ship
===
added stat 'stability' for chasis secondary to represent the force resistance when taking dmg
===
wasted a bunch of time on 3rd person cameras: orbit specifically
==
started with a basic level: mimicking the deathstar destroy objectives from rogue leader
==
messed around with the secondary engine rotation: this needs more work but can wait for more of the vertical slice to be Done
since alot of it is game feel and having a game wrapped around it will make testing easier
=====
?? flight controls like pulsar: toggle between directional and angular movement
====
targeting set up for both enemies and objectives:
it first targets the closest and then works outward -> switching types restarts at 'closest'
===
enemies bring their own crosshair -> 3 poprtions: one that highlights them, one for their position with velocity, and one for if
they are targeting the playing
-> each enemy brings their own instead of the camera assigning one to allow for multiple enemies to display information when needed
and to simplify matching size and shape
====
basic targeting
===
actortype added to enum groups
===
made computer subsystem
====
Gameconstants now has methods for setting stats based on item type:
the item manager passes the item and if the stat is left as 0 it is assigned to the default
===
added 'computer' itemtype and 'sensor' stat
===
equipment stats are applied by type:
armor = chasis + (chasis * (weapon + engine))
damage = weapon + (weapon * (chasis + engine))
mobility = (engine + (weapon * engine)) * chasis
damage = (engine + (weapon * engine)) * chasis
===
'shipsystem' parent class now checks for ship equipment for its 'stat_power' and secondarypower
--and checks the stat based on its type: chasis checks for armor,engine for speed-mobility, weapon for damage-firerate
===
when an item is dropped the item is represents is set to the assosicated variale that reflects the Item id
which it then pulls from the master list
===
item drops from the itemmanager 
which has the PARENT_itemdrops
===
made key for item ids: how its used - type - # id
e-g-0 [equipment-gun-#]
===
made 'itemsubtype' class to hold the enum values for the different items [fleet ships, equipment etc]
this way all items have the enum values and can be set without type conversion
==
added scriptable object to hold all the images for sprites
===
fleet ship button prefab: for setting the ships name stats, icon etc
===
fleet ships [which are used like a talent tree] added to the item master list and the Class now inherits from items
===
storage space is universal: possibly have a conversion -> i.e. 1 pop is the space of 5 food or 10 fuel
===
worldtime tracks time based on the chosen format [time passed, menus, inputs etc]
===
added default stat values based on type [ship/bullet/etc] to the static Game Constants
===
started making the fleet that acts as a talent tree to modify stats and hold/create/spend resources
=====
the battle overhead in space that is set up as a background action can use particles systems to 'send out fighters'
========
tried adding an element to the 'zigzag' bullet for multiple direction changes [up,down,left,right]
-this is very similar to just a spiral and from a player standpoint would not seem different enough to be worth engaging with
====
more bullet type stuff: added zig zags
======
bullets and sfx [explosions] use the factory format on their own
-> my natural inclination is to now centralize this, but thats an extra step that I could easily do later
--> and right now its not clear if any more would end up being needed to constitute the need for the work
---> and the sfx /bullet script are both parent scripts to alternate to match what is needed when they are called so I wont be adding more subtypes
============
july2:
===============

added bullet types to the enum groups, for the types of projectiles that can be fired [spirals, boomerang etc]




=====
june23: started turning stats into a dictionary constructed from the enum:
-> this way adding stats is easier and I dont need to update multiple portions of the inventory and item manager code
---should it bne a list to be seen in the inspector?


expand the stats to make having some items apply to multiple areas easier. A chasis reducing speed or engine increasing dmg etc

Stat sheets: making the master sheet easy to read and add to will make item creation easier in the long run. Doesnt need to be fancy with xml or json, just  ',' and ':' with the stat names

Gameloop: what data needs to be tracked for a given level for restarting versus traveling to the map fresh [respawn enemies versus maintain current state]

NPCs/Targets: -> Actor: anything with hitpoints

Progress: Competing fleets -> stateful game progress:
    Player and Enemy fleet act as part of a talent tree that changes the game state:
    -rescue a ship that can upgrade items
    -destroy a fuel refinery to increase the time before the next attack
    -capture mining facility to decrease number of enemies that respawn
    etc


Camera Control: for hitting the map boundary and returning thr player back to the play are -> for the player -> camera controls the rotation back to center to avoid the jitter and possible motion sickness 

Enemy AI: -> always turn to target and move forward results in a small constant bumping when too close
Enemy AI: -> some states have conditions in them external of the 'make decision' paradigm [ a strafing run would start at one end of the ship and end at the other, so that enemy would check when it reaches the end NOT wait to 'make decision']




====
Enemy
===
## Data:
hp,pointValue,itemdrops
===
## Functionaility

- [Stance](#idle,aggressive,neutral,defensive,active)
  + [idle](#unaware_of_target)
  + [alert](#aggressive,neutral,defensive)
        - [State](#AI_logic)
    **_OR_**
  + [active](#always_in_alert)
        - [State](#AI_logic)


====


public enum Stats
{
    none
    , armor
    , damage
    , speed

    , mobility

    , fireRate
    , stamina_max
    , stamina_cost
    , stamina_rechargeLockout
    , backpack_slots
    , pointValue

    ??
     collision resistance
     collision attack damage
}

?? ---> engine's have a 'use % of speed stat' for [fwd,lateral, etc]





Hi Morgan,

That is great to hear. On [6/6-6/8] and [6/13-6/17] I am available anytime between 10am and 2pm Eastern Time.

Thanks,
Dan Donato


  